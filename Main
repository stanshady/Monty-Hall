package MontyHall;

import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.text.DecimalFormat;
import java.util.ArrayList;

public class Main extends Application {

    private Pane root;
    private Button next, finalChoice, playAgain;
    private GameShow gameShow;
    private Text percentStay, percentSwitch;
    int numGamesSwitch, numGamesStay, numWinStay, numWinSwitch, original;

    private Parent initRoot() {
        root = new Pane();

        gameShow = new GameShow();

        numGamesSwitch = 0;
        numGamesStay = 0;
        numWinStay = 0;
        numWinSwitch = 0;

        next = new Button("Next");
        next.setTranslateY(730);
        next.setTranslateX(430);

        next.setOnAction(event -> {
            if (!gameShow.getPicked()) {
                event.consume();
            } else {
                ArrayList<Integer> temp = gameShow.makeOpenDoorList();
                int rand = (int) (Math.random() * temp.size());
                gameShow.getDoors()[temp.get(rand)].openDoor();
                root.getChildren().remove(next);
                root.getChildren().addAll(finalChoice);
                gameShow.setPickTextVisible(false);
                gameShow.setChangeTextVisible(true);

                original = -1;
                for (int i = 0; i < 3; i++) {
                    if (gameShow.getDoors()[i].isArrowVisible())
                        original = i;
                }
            }
        });

        finalChoice = new Button("Final Choice");
        finalChoice.setTranslateY(730);
        finalChoice.setTranslateX(410);

        finalChoice.setOnAction(event -> {
            boolean isWon = false;
            int finalPick = -1;
            for (int i = 0; i < 3; i++) {
                Door temp = gameShow.getDoors()[i];
                if (temp.isPrize() && temp.isArrowVisible()) {
                    isWon = true;
                }
                if (!temp.isOpen()) {
                    temp.openDoor();
                }
                if (temp.isArrowVisible()) {
                    finalPick = i;
                }
            }
            gameShow.setChangeTextVisible(false);

            boolean switched = finalPick != original;

            if (isWon) {
                gameShow.setWinTextVisible(true);
                if (switched) {
                    numGamesSwitch++;
                    numWinSwitch++;
                    percentSwitch.setText("Switch Win %\n      " +
                            numWinSwitch + " / " + numGamesSwitch + "\n      " +
                            formatDecimals((100 * numWinSwitch) / numGamesSwitch) + "%");
                    percentSwitch.setVisible(true);
                } else {
                    numGamesStay++;
                    numWinStay++;
                    percentStay.setText("Stay Win %\n    " +
                            numWinStay + " / " + numGamesStay + "\n    " +
                            formatDecimals((100.0 * numWinStay) / numGamesStay) + "%");
                    percentStay.setVisible(true);
                }
            } else {
                gameShow.setLoseTextVisible(true);
                if (switched) {
                    numGamesSwitch++;
                    percentSwitch.setText("Switch Win %\n      " +
                            numWinSwitch + " / " + numGamesSwitch + "\n      " +
                            formatDecimals((100 * numWinSwitch) / numGamesSwitch) + "%");
                    percentSwitch.setVisible(true);
                } else {
                    numGamesStay++;
                    percentStay.setText("Stay Win %\n    " +
                            numWinStay + " / " + numGamesStay + "\n    " +
                            formatDecimals((100 *numWinStay) / numGamesStay) + "%");
                    percentStay.setVisible(true);
                }
            }

            root.getChildren().remove(finalChoice);
            root.getChildren().addAll(playAgain);
        });

        playAgain = new Button("Play Again?");
        playAgain.setTranslateY(730);
        playAgain.setTranslateX(410);

        playAgain.setOnAction(event -> {
            replay();
            root.getChildren().remove(playAgain);
            root.getChildren().addAll(next);

        });

        percentStay = new Text();
        percentStay.setFont(new Font(20));
        percentStay.setFill(Color.DARKSLATEGRAY);
        percentStay.setTranslateX(25);
        percentStay.setTranslateY(730);
        percentStay.setVisible(false);

        percentSwitch = new Text();
        percentSwitch.setFont(new Font(20));
        percentSwitch.setFill(Color.DARKSLATEGRAY);
        percentSwitch.setTranslateX(750);
        percentSwitch.setTranslateY(730);
        percentSwitch.setVisible(false);

        root.getChildren().addAll(gameShow, next, percentStay, percentSwitch);

        return root;
    }

    private void replay() {
        root.getChildren().remove(gameShow);
        gameShow = new GameShow();
        root.getChildren().addAll(gameShow);
    }

    public String formatDecimals(double num) {
        DecimalFormat df = new DecimalFormat("#.###");
        return df.format(num);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(initRoot()));
        primaryStage.show();
    }
}
